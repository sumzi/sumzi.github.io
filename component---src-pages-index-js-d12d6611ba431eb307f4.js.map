{"version":3,"file":"component---src-pages-index-js-d12d6611ba431eb307f4.js","mappings":"oPAaA,EAXqB,SAAH,GAAyC,IAAnCA,EAAQ,EAARA,SAAUC,EAAW,EAAXA,YACxBC,EADyC,EAAJC,KACrCD,WACR,OACE,uBACEE,QAAS,kBAAMH,EAAYC,EAAW,EACtCG,UAAS,oBAAqBL,IAAaE,EAAa,WAAa,KAEpEA,EAGP,EC+BA,EAvCqB,SAAH,GAAmC,IAA7BF,EAAQ,EAARA,SAAUC,EAAW,EAAXA,YAC1BK,GAAOC,EAAAA,EAAAA,gBAAe,cAWbC,EAAaF,EAAKG,kBAAzBC,MACR,OACE,2BACE,0BACE,gBAAC,EAAY,CACXV,SAAUA,EACVC,YAAaA,EACbE,KAAM,CACJD,WAAY,MACZS,WAAYL,EAAKG,kBAAkBE,cAGtCH,EAASI,KAAI,SAAAC,GACZ,IAAQX,EAAeW,EAAfX,WACR,OACE,gBAAC,EAAY,CACXF,SAAUA,EACVC,YAAaA,EACba,IAAKZ,EACLC,KAAMU,GAGZ,KAIR,EC2BA,EA7DkB,SAAH,GAA4B,IAAD,EAArBP,EAAI,EAAJA,KAAMS,EAAQ,EAARA,SACzB,EAAgCC,EAAAA,SAAe,OAAxChB,EAAQ,KAAEC,EAAW,KAEtBgB,GAAkC,QAAtB,EAAAX,EAAKY,KAAKC,oBAAY,aAAtB,EAAwBC,QAAK,QAC3CC,EAAQf,EAAKG,kBAAkBa,MAEnC,OAAqB,IAAjBD,EAAME,OAEN,gBAAC,IAAM,CAACR,SAAUA,EAAUK,MAAOH,GACjC,gBAAC,IAAG,MACJ,wLAQW,QAAbjB,IACFqB,EAAQA,EAAMG,QAAO,SAAAC,GAAI,OAAIA,EAAKC,YAAY1B,WAAaA,CAAQ,KAGnE,gBAAC,IAAM,CAACe,SAAUA,EAAUK,MAAOH,GACjC,gBAAC,IAAG,MACJ,gBAAC,EAAY,CAACjB,SAAUA,EAAUC,YAAaA,IAC/C,sBAAI0B,MAAO,CAAEC,UAAU,SACpBP,EAAMT,KAAI,SAAAa,GACT,IAAML,EAAQK,EAAKC,YAAYN,OAASK,EAAKI,OAAOC,KAEpD,OACE,sBAAIhB,IAAKW,EAAKI,OAAOC,MACnB,2BACEzB,UAAU,iBACV0B,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAC,KAAI,CAACC,GAAIT,EAAKI,OAAOC,KAAMK,SAAS,OACnC,wBAAMA,SAAS,YAAYf,KAG/B,6BAAQK,EAAKC,YAAYU,QAanC,MAIR,EASaC,EAAO,WAAH,OAAS,gBAAC,IAAG,CAACjB,MAAM,cAAe,C","sources":["webpack://sumzi.github.io/./src/components/CategoryItem.js","webpack://sumzi.github.io/./src/components/CategoryList.js","webpack://sumzi.github.io/./src/pages/index.js"],"sourcesContent":["import * as React from \"react\"\n\nconst CategoryItem = ({ category, setCategory, item }) => {\n  const { fieldValue } = item\n  return (\n    <div\n      onClick={() => setCategory(fieldValue)}\n      className={`category-button ${category === fieldValue ? \"selected\" : \"\"}`}\n    >\n      {fieldValue}\n    </div>\n  )\n}\nexport default CategoryItem\n","import { graphql, useStaticQuery } from \"gatsby\"\nimport * as React from \"react\"\nimport CategoryItem from \"./CategoryItem\"\n\nconst CategoryList = ({ category, setCategory }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n        group(field: frontmatter___category) {\n          fieldValue\n          totalCount\n        }\n        totalCount\n      }\n    }\n  `)\n  const { group: cateList } = data.allMarkdownRemark\n  return (\n    <div>\n      <ul>\n        <CategoryItem\n          category={category}\n          setCategory={setCategory}\n          item={{\n            fieldValue: \"All\",\n            totalCount: data.allMarkdownRemark.totalCount,\n          }}\n        />\n        {cateList.map(cateItem => {\n          const { fieldValue } = cateItem\n          return (\n            <CategoryItem\n              category={category}\n              setCategory={setCategory}\n              key={fieldValue}\n              item={cateItem}\n            />\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\nexport default CategoryList\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport CategoryList from \"../components/CategoryList\"\n\nconst BlogIndex = ({ data, location }) => {\n  const [category, setCategory] = React.useState(\"All\")\n\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  let posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n  if (category !== \"All\") {\n    posts = posts.filter(post => post.frontmatter.category === category)\n  }\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Bio />\n      <CategoryList category={category} setCategory={setCategory} />\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                {/* <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section> */}\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"All posts \" />\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          category\n        }\n      }\n    }\n  }\n`\n"],"names":["category","setCategory","fieldValue","item","onClick","className","data","useStaticQuery","cateList","allMarkdownRemark","group","totalCount","map","cateItem","key","location","React","siteTitle","site","siteMetadata","title","posts","nodes","length","filter","post","frontmatter","style","listStyle","fields","slug","itemScope","itemType","Link","to","itemProp","date","Head"],"sourceRoot":""}